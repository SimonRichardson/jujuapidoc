// Code generated by go-bindata.
// sources:
// jujugenerateapidoc/go.mod
// jujugenerateapidoc/go.sum
// jujugenerateapidoc/prog.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jujugenerateapidocGoMod = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\xc1\x4e\x04\x21\x10\x44\xcf\xf2\x15\x1c\xf5\x00\x74\x83\x3b\x30\x9f\xc3\x42\x8b\x6c\x66\xa6\x91\x05\xe3\xe7\x9b\xac\xa7\x9d\xc4\x4b\xa5\x52\x49\xbd\xbc\x9d\xf3\xdc\x48\x96\x3a\x3e\xe7\x55\x27\xde\xcd\x6d\xde\xe6\x23\x62\xab\x99\xd3\xa3\x16\x3a\xa8\xc7\x41\x7f\x93\x10\x9d\xbe\x66\xed\x24\x5f\xc5\xcb\xff\x4f\xf9\x0d\x1a\x34\x28\x0b\x18\x10\x1c\xa0\x7d\x77\xd6\x29\x8f\xc1\x27\x08\x2b\xda\x8f\xab\x34\x46\xd6\x23\xd7\x4e\x69\x3c\xa1\x3a\x97\x46\xad\x91\xd9\xeb\xfd\x04\xc2\x80\x16\x57\xe7\x55\x86\x15\x2f\x0b\x5c\x62\xc2\xe5\x04\xe2\x2d\x1e\x45\x73\x2f\xe6\xc7\x0c\xe6\xed\x7e\x76\x01\x00\x8f\x8b\x8a\x10\xd1\x11\x78\x97\xfc\xb3\xcb\x9b\xf8\x0d\x00\x00\xff\xff\xb7\xba\x44\xe9\x19\x01\x00\x00")

func jujugenerateapidocGoModBytes() ([]byte, error) {
	return bindataRead(
		_jujugenerateapidocGoMod,
		"jujugenerateapidoc/go.mod",
	)
}

func jujugenerateapidocGoMod() (*asset, error) {
	bytes, err := jujugenerateapidocGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jujugenerateapidoc/go.mod", size: 281, mode: os.FileMode(436), modTime: time.Unix(1540903459, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _jujugenerateapidocGoSum = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\xd4\x4b\xb3\xa2\x38\x18\x06\xe0\x7d\xff\x8a\xde\x9f\x52\x12\x6e\x09\x53\xd5\x0b\x44\x54\x50\xa0\x39\x0a\x88\x3b\x08\x77\x84\x70\x13\xc4\x5f\x3f\xe5\xa9\x9a\x1a\xa7\xbb\x67\x31\x7d\x66\xc3\xf2\x7d\xbe\x97\x7c\x49\x9a\x0f\xd9\x2d\x5c\x12\x5a\x31\xc5\xad\xb8\x7d\x7c\xbe\x8e\x60\x09\x96\x60\xc1\x02\x88\x21\xe0\x00\x80\x02\x27\x08\x0b\x21\xe6\xa4\x28\xc6\x1c\xc4\x09\xfb\x35\x83\x7f\xf0\xfd\xca\xd0\xd7\xe5\x34\xae\x6f\x01\xed\x6c\x99\x20\x63\x68\x79\xd4\xa9\xa1\x35\xef\xbd\xd3\x86\x58\x5c\xd4\x61\x6a\xcc\x2a\xf8\xf6\xe5\x37\x1d\x26\xa5\xcb\x8a\x46\x4f\xce\x54\x9d\xd1\x77\xee\x96\x5c\xf1\x62\xdc\x82\xab\x2f\x25\x6c\x5d\x6e\x83\xc3\x2e\xad\x27\x49\xba\xee\xb4\xfe\x34\x64\x7d\x6e\xa5\xf4\xd7\x5c\xd0\xe4\x11\x25\x3f\xa2\x90\xe5\x21\x94\x16\x12\x8b\xb1\x24\xc1\x30\x00\x80\x7f\x6a\x5a\x81\x57\x61\x09\x1a\x99\x33\x1e\x27\xa4\x11\xbe\x6c\x8f\x43\xa3\xad\xac\xdd\x05\x5a\xc7\xbb\x10\x52\xa2\x3a\xe8\x92\xcb\x22\xfe\xa4\xf6\x52\xd1\x5b\xe5\x6d\x5c\x6d\x95\x6a\xd2\x36\xd0\x15\xbc\xb7\xba\x1e\x7c\xce\x4a\xba\x37\x5c\x5c\x20\xd3\x1f\x71\x7c\x75\x90\x73\xb6\xd1\x7f\x45\x39\x96\x5b\x20\x88\x11\x01\x58\x82\x6c\x12\x3e\x35\xc9\x65\x66\x25\x21\x72\x29\x39\x9e\x51\x41\xcf\xd7\x65\x93\x3f\xb6\xbc\x76\x2e\x7a\xe2\xaf\x7b\x29\xa2\xa3\x56\xa5\x99\xda\xa7\x9f\xd4\xfe\x87\x8a\x65\xc7\x34\x5d\x3c\x0c\xf3\x93\x83\x4b\xf0\x12\x19\xc9\x33\x77\x8d\xd0\x55\x4a\x40\x1e\xae\x4d\xcb\xb6\x76\x3b\xc3\xf7\x35\x2d\xcc\x92\x70\x77\xac\x38\x85\xbf\xf4\x54\xb7\xde\x4d\xfa\x53\xe4\x33\x0f\x2e\xe1\x12\xbe\xe4\x35\x1b\xdb\xaf\x45\xd1\xdb\x75\x56\xf3\xdd\x37\xaf\xc5\x64\x19\x2d\x85\xe0\x54\xfa\x19\x4c\x66\x8e\xf8\x39\x65\xaf\x5c\xa8\xf4\xf6\x8f\x79\x43\x7c\x1f\x7e\x1e\x90\xd7\xc3\xf1\x6d\xad\x7b\x9c\x73\x62\x0e\xb9\x35\xe9\xb1\x6f\xc7\x30\x4e\xda\xc1\xb9\x33\xb9\x9b\x05\x15\xc3\x8f\x49\x24\x77\xa6\xf6\x8f\xc0\x8e\xa6\x4d\xdc\x34\x31\x13\x34\x39\xa1\x55\x13\x0c\x2f\xff\x5a\x04\x02\x8b\x20\x86\x82\xc0\x2f\x00\x11\x60\xc2\x05\x5c\x22\x89\x1f\xcb\x1b\xd4\x85\x66\x3e\xa0\xe9\x4d\x89\x77\xd6\xd3\x6c\xc7\x91\x9b\x34\xcc\xf5\x3b\x71\xa3\xf7\xa3\xab\xd6\xfe\xbe\x52\xd5\x6a\x50\x20\xff\x79\xf0\xf5\x70\x35\xd7\x9a\x55\x96\x4b\xce\xb5\x70\x14\xb8\xfe\x74\xa8\x69\x26\x47\xb0\xdd\x8c\x54\xa1\x0f\xd3\xd9\x3a\x77\x5b\x8e\x07\xa1\x77\x7e\xed\x56\x79\xff\xc3\x3e\x41\x0c\x59\x28\x71\x68\x11\x01\x09\x0a\x22\x10\x02\x02\xc5\xa7\x25\x8c\x01\x9b\x69\x01\xb1\x57\x6d\xd8\x3e\x6e\xd4\x56\x13\x90\xf1\xef\xfa\x3a\x54\xed\xf1\x4d\x24\xae\xe3\xf7\xea\x38\x31\x29\x9e\x3e\x65\xbd\xd4\xcb\x4e\x68\x2f\xea\xec\xc1\x9c\x9c\x20\x68\x51\x37\x4c\x1b\xc1\x35\x56\x52\x69\x4b\x73\x82\x76\xa9\xbf\x31\x5d\xcb\x4a\x78\x68\x3d\xcf\x91\x5e\x83\x3a\x5d\xd2\x2e\x65\xee\xcc\x40\xe9\xb5\xff\xe9\xb9\x03\x00\x41\x71\x11\x80\x00\x72\x31\x40\x1c\x41\x1f\xd7\xd2\xa9\x85\x7c\x6f\x8c\xe9\x41\xdb\x1a\x8f\xad\x01\x2b\xdd\x1b\x73\x96\xdd\xe4\xc6\x59\x3a\xaf\x44\xc6\xb4\x1e\xfe\x9e\xce\xa2\x38\xe3\xdf\x54\x5e\x2a\xd5\xc8\x54\x6e\x11\x59\x31\xb5\xfa\xb8\xbb\xdb\xea\x10\xae\x3d\x5f\x68\x12\xef\x74\x68\x57\x44\x61\xf7\x17\xb1\x98\xfd\xd1\xe0\xab\xe7\xae\xd3\xa6\x4c\x97\x79\xcd\x90\x2c\x26\xe5\x72\x84\xcf\xbb\xf3\x97\x05\x44\x16\x43\xc4\x41\x80\x17\x08\xe3\x24\x42\x98\x07\x90\x45\x2f\x96\x42\xc5\x3c\x74\x75\xf9\x51\xcb\x81\x56\xb6\x0d\xce\x6e\xa7\xe9\xaa\xdb\xca\x05\x40\xb1\xa0\x09\x43\x42\x93\x77\x3d\xc1\x7f\x80\x17\x2b\xee\xba\x94\xfe\x6d\x7d\x0c\xfd\x86\xce\x89\x32\xcf\xe9\x6a\x13\xe2\x5e\x2d\x52\x51\x94\xd8\x7b\xa1\x88\x4e\x2f\x80\xd3\xe6\xdd\x12\xf8\xb7\xbb\xef\xa8\x53\xa1\xfe\x7b\xd0\xeb\x60\xf7\xa9\x7f\x1c\x99\xf3\x03\x2a\xbc\xe4\x90\x88\xcd\xc5\x4b\x7e\x15\x9c\x13\xfd\x0e\xd5\x6a\xee\x36\xd9\x3e\x30\xdc\x30\x85\x55\xf9\xed\xcb\x9f\x01\x00\x00\xff\xff\x88\xbe\xb8\x92\x31\x07\x00\x00")

func jujugenerateapidocGoSumBytes() ([]byte, error) {
	return bindataRead(
		_jujugenerateapidocGoSum,
		"jujugenerateapidoc/go.sum",
	)
}

func jujugenerateapidocGoSum() (*asset, error) {
	bytes, err := jujugenerateapidocGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jujugenerateapidoc/go.sum", size: 1841, mode: os.FileMode(436), modTime: time.Unix(1540903459, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _jujugenerateapidocProgGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x5a\x7d\x8f\xdb\x38\x73\xff\x5b\xfe\x14\x13\x15\x7b\x27\x07\x8e\x94\xb6\x40\x0b\xb8\xf1\x01\x79\xf2\x72\xcf\xa2\xd9\xc4\xb8\xdd\xeb\x83\x22\x08\xee\xb8\xd2\x48\x66\x2c\x91\x3a\x92\xde\x97\xe6\xf6\xbb\x17\x33\x24\x25\xd9\xeb\x4d\xb6\xb9\x06\x88\x6d\x91\xc3\x99\xe1\xcc\x6f\x86\x33\xd4\x16\x05\x5c\x6c\x10\x1a\x54\x68\x84\x43\xd1\xcb\x4a\x97\xd0\x1b\xdd\x18\xd1\x81\xb4\x70\xb9\x53\x55\x8b\x15\x08\x0b\x42\x81\xb0\x16\x1d\x48\xe5\x34\x7c\xde\x7d\xde\x79\xf2\x59\x51\x80\xd5\xe0\x36\xc2\xc1\x35\x42\xa5\xd5\x8f\x0e\x14\x62\x05\x4e\x83\xc1\x0e\xbb\x4b\x34\xf4\xbb\xd4\x5d\x2f\x5b\xf4\x94\x41\x06\x2d\x96\x0a\xb4\xa9\x3c\x4d\xd4\x04\xdc\x86\x58\x95\x36\x9f\xf5\xa2\xdc\x8a\x06\xa1\x13\x52\xcd\x58\x18\x22\x34\xd2\x6d\x76\x97\x79\xa9\xbb\x82\x34\xe1\x0f\x78\xfe\xef\xff\xf6\x4c\xf4\xd2\xa2\xb9\x42\xf3\xac\x16\xa5\xa8\xf0\x59\x2b\xad\x7b\x56\xa1\x13\xb2\xb5\xb3\x99\xec\x7a\x6d\x1c\x64\xb3\x24\x45\x55\xea\x4a\xaa\xa6\xf8\x6c\xb5\x4a\x67\x49\x5a\x77\x8e\xbe\x1a\x5d\x08\x1b\x7f\xf5\xc2\x58\x34\xe1\xc1\xe9\x2d\xaa\xf8\xfb\xb6\x47\x4b\xbf\x37\xae\x6b\x0b\x87\x5d\xdf\x0a\x87\x34\xd0\xea\x86\xbe\x34\xcf\x1a\xac\x5b\x2c\x5d\x3a\x9b\x25\xde\xd6\x16\xa1\xc2\x1e\x55\x85\xaa\x94\x68\xc1\x6e\xf4\xae\xad\x40\x69\x07\x97\x08\xfd\x8e\xcc\x4b\x9b\x67\xfa\x46\xe7\x9d\xae\xa0\x96\x2d\x2e\xc8\x05\x6e\x83\xb7\x71\x45\xa9\x3b\x84\xda\xe8\x6e\xa0\xb6\x48\xa2\xb0\x62\xdf\xc0\x15\x1a\x2b\xb5\xca\x49\xdd\x03\x63\xa1\x31\xda\xb0\x7a\xc7\xcc\x58\x0c\x26\xfc\x36\x45\x51\xea\xae\xf3\xd6\xfb\x06\xa1\xf7\xc6\x83\x84\x3d\x9a\x4e\x5a\x52\xf8\x41\x12\xd3\x97\xf4\x7f\xb0\xe8\x03\x64\xd6\x05\x3f\x34\xba\xdf\x36\xb9\x54\x7e\x58\x89\x0e\x6d\x7e\xf5\x2f\xe4\x89\xa3\x0b\x3d\x98\x0b\xff\x75\xc0\xdd\xe8\xa6\xc7\xbe\x47\x9a\x25\x14\x0b\xc7\xa0\x19\x30\x70\x8c\xb4\x93\xb6\x2c\xcc\x4e\x39\xd9\x61\x51\xe1\xe5\xae\xf1\x4a\xb5\x42\x35\xb9\x36\x4d\x71\x53\x38\xad\x5b\x5b\x34\xba\x68\xb5\xa8\x22\xca\x82\xd2\x68\x4c\xa3\xf3\xab\x7f\x4e\x67\xf3\xd9\xac\xde\xa9\x92\xf1\x9f\xcd\xe1\xcb\x2c\x91\xaa\xd6\x0b\x40\x63\x60\xb9\x1a\x22\xe6\x54\xd5\x3a\x9b\xcf\x12\x59\xf3\xcc\x93\x15\x28\xd9\x12\x75\xd2\xea\x26\x7f\x2b\x9c\x68\x33\x34\x66\x3e\x4b\xee\x66\x49\x25\x9c\x18\x38\xd0\x56\xf2\x33\x61\xec\x46\xb4\x19\xf1\x7e\x2c\x17\x6d\xf3\x73\x57\xe9\x9d\xcb\xff\x61\xa4\xc3\x8c\xb8\xfa\xb5\x2d\xaa\xac\x17\x4a\x96\x5b\xac\xe6\xf0\x13\x3c\x1f\x58\xac\x8d\x54\xae\xce\xd2\x93\xaa\x38\xa9\xc0\xa3\xc2\x42\xa4\x85\xeb\x0d\x2a\x70\xe6\x56\xaa\x86\xd2\x41\x85\x8e\x80\xa1\x10\x44\x59\xa2\xb5\x90\xb9\x8d\xb4\x94\x98\x94\x36\x9d\x68\xe7\xe9\x62\x5f\x96\x7f\x14\x6d\xfb\x96\x39\xbf\x27\xaf\xcf\x59\xdb\xbb\x60\xc6\x7d\x7b\x41\xf6\xd4\x7b\x3c\x3f\x8d\x46\xd5\x86\x8d\xec\x71\xbb\xde\x36\x64\xa2\x6f\x07\x4a\x59\x33\xa1\xf7\x64\xfe\x4a\xab\x5a\x36\xb4\xe7\x8b\xdb\x1e\x5f\x6d\xb0\xdc\xbe\xdd\xa9\xf2\x6f\xba\x92\x68\x97\x40\x8a\x64\xd6\x19\xa9\x9a\x39\x5c\x6a\xed\x2d\x9c\x18\x74\x3b\x43\xdb\xdf\xe1\x2c\x49\xee\x16\xb3\x24\x39\xe5\x7c\xb5\xde\x36\x76\x09\x9d\xe8\x3f\xfa\x45\x9f\x68\x0d\x2f\x19\xb4\x5c\x42\x2d\x5a\x8b\x0b\x28\x0a\xff\x0b\x3a\x14\xca\x86\x74\x4c\x6a\x81\x43\xeb\x6c\x1e\x39\xaf\x39\xb3\x9d\xe9\x0a\x97\xe0\xb3\x5c\xce\x43\xaf\x74\xd7\xa1\x72\x76\xc1\x2e\xa6\x34\x3d\x00\xa5\xac\x9b\xfc\x9d\x16\xd5\x71\x98\x05\xed\x95\x6c\x79\x41\xa3\xf3\xf7\xda\x61\x4d\x70\x59\x40\x5a\x0a\x45\x39\x8e\x15\x39\xf9\x23\x5d\xc0\xa0\x39\x7b\xc7\x83\x3a\xa2\x91\x03\x2b\x7f\x8f\xd7\x11\xd4\x95\xa5\xa9\xc1\xde\xf9\xcb\xe8\x60\x9b\xcd\xf3\x77\xd2\xba\xd7\x3e\xc1\x07\x5a\x22\xa5\x1c\x9b\x55\x76\x31\x5d\x55\x75\x52\xf9\x75\x03\x7d\x9e\xe7\xf3\x59\x52\x6b\x03\xbf\x2d\xa0\x22\x29\x46\xa8\x06\xa1\xb2\xbc\x29\xc7\x23\x43\xd6\xc9\x3f\x5c\x7e\x26\x8f\x7e\xa8\xb3\x2a\xa7\x1f\xf3\xd9\x2c\x89\xab\x29\xc5\x8c\x0c\x5c\x7e\x86\x6e\xa3\x2b\x86\xa0\x8f\xdb\x24\xe9\x16\xf0\x1b\x91\xc4\xc9\x8c\xd6\xcc\x69\x46\xd6\xd0\x91\x03\x44\x67\xa7\x46\x4d\xd8\x2e\x2c\x8a\x6d\x11\x69\x78\xcd\xdd\xb0\xf0\x17\xb4\xbb\xd6\x7d\x7d\xa1\xa7\x19\x16\xde\xb1\x7f\x45\x2f\x4f\x83\xe1\x7f\x98\x04\x42\x44\x2e\xfd\x5e\x02\xe7\x1b\x26\x7f\xd0\x4e\x75\xf0\x0f\x31\xf0\x16\x8e\x6c\x12\x32\xc0\x12\xc2\xbf\x2a\xa7\x47\xc2\x5f\xf2\x5f\xfe\x80\x5a\x86\xf1\xf0\xc8\x53\x2f\xaf\x84\x6c\xc5\x65\x8b\x17\x7a\x09\x62\x7c\xc8\xc2\x72\xa8\x48\x88\xd3\xe6\x76\xbe\xf0\x5b\x49\x7a\x37\xc0\x94\x30\x4b\xca\x67\x1e\xbc\xd1\x51\xc9\x11\xcc\x3e\x0e\xb4\x0d\xfa\x7a\x05\x08\x97\x40\x36\x38\xb9\x4a\xa7\x8c\x49\x01\x57\xe9\x72\x50\x81\x08\x5f\xeb\x32\xc4\x52\x50\xa4\x77\x7f\x55\x09\x2a\xce\x4a\xcf\x33\xa8\xb1\x3c\xa6\x4a\x9d\xbf\xd6\x25\xac\x80\x54\x7a\x14\x86\xff\x7f\x20\x5c\x77\x13\x10\xf8\x49\x8f\x44\x8f\x00\x15\x1d\x7f\xf7\x55\xbc\xd7\x61\x18\x56\x8c\xbb\xfc\x17\xac\xff\x2f\xa8\xaf\x87\xe1\xbd\xf5\x07\xe0\x4f\xba\xa9\xb7\x3a\xd6\xf5\x88\xbf\xbc\x41\x62\x7c\x1e\xba\xed\xaf\xf8\x2d\x3f\x70\xdd\x44\xd2\x9d\xb7\x65\xf0\x61\xe7\x7d\x98\xd4\xc1\xa2\x93\xe4\x36\x0c\x2d\xa0\xee\xa2\xef\x43\x40\x87\x20\x9c\x50\x1f\x4c\x2c\xa0\xf6\x87\x78\xd8\x44\x98\x5e\xd0\x6e\xe8\xac\xbc\x12\x06\x5c\xd7\xb7\x74\x6c\x11\x97\x58\xe1\xe6\x34\x70\x26\xfa\x2f\xb3\x24\x25\x94\xbf\x93\x6a\x9b\x86\x13\xcd\xc1\xd3\x31\x7b\x33\xb2\xc6\x65\x7f\xbf\x38\x7b\xc7\x66\x93\x35\x38\x58\xdd\x47\x7f\xaa\x0a\x91\x86\x4d\xb4\x52\x6d\xc9\x31\x75\xe7\xf2\xf3\xde\x57\x0c\xbf\xbf\x10\xb0\x31\x58\xaf\xd2\x8d\x73\xbd\x5d\x16\x45\xa3\x09\x68\x54\x4a\x9d\xd8\xf4\xa7\x13\xfb\xa2\x10\x3f\xfd\xbe\x00\x17\x72\x84\xff\xe6\x8f\x8c\x4a\x80\xe1\x78\x9d\xaa\x94\x91\x28\x32\xc4\x62\x28\x10\x8e\xa2\x01\x9e\x86\x93\x7d\xed\xfb\x96\x05\x38\x8e\x95\xa7\xe3\x66\xbd\xd4\x6e\x88\x18\x88\x07\x7c\x38\xe9\xa7\xc5\x05\x87\x24\x73\xe0\xa5\xe1\x40\x7d\xe2\x99\x9d\xda\x53\xe5\xd0\xd4\xa2\xc4\xcc\xf9\xa8\x2b\x0a\xf8\xd5\xfa\xa6\xa8\xd7\x92\x66\x7d\x2e\xe2\x8e\xc9\x51\x6b\xd0\x09\x75\x1b\x84\x5b\x7a\xee\xb5\xb5\xf2\xb2\xc5\x9c\x13\x80\xcf\x48\x7c\xa4\xae\xfd\xfa\xcc\x85\x73\xb7\xa3\x96\x6e\x39\x21\xf0\xa0\x3a\x47\xc7\x24\x16\x5b\x0e\x11\x8b\x2e\x7f\xa7\xf5\x76\xd7\x67\x8c\xf7\x71\x9f\x5e\x77\xa2\x5b\xdd\x2b\x06\xd2\x74\x88\x0c\xbc\xae\xb3\x18\x13\xb5\x54\x55\xe0\x00\x27\x57\xa0\x95\x0f\x85\x91\xe7\x02\x5c\x28\x31\x2f\x3f\x93\x78\x8b\x2d\xa5\x2d\x3e\xde\xb1\x6c\x87\xc8\x25\x46\xaf\xb1\x6c\x43\xc4\xea\xcb\xcf\xf9\x5a\x5b\x76\xf7\x83\x05\xca\xa8\xd3\x99\xb0\xdb\xb1\x9a\xb5\xd7\xd2\x95\x1b\x20\xfe\xc4\x9a\xbe\xf3\xcc\x31\x8a\xbf\xcc\x92\x52\x58\x84\xa7\xc2\xba\xfc\x67\x54\x24\x72\xe9\xb1\xcc\x64\x17\x7a\x4b\x82\xb8\x3f\xcc\x2f\xfe\x7b\xfd\x66\x1f\xd9\x07\x46\xa8\xf5\x4e\x51\xc7\xa7\x9e\xb1\x0f\x59\xe0\xc9\x3f\x71\x2e\xc0\xb2\x1d\x92\xb8\xcf\xc8\xb6\xc7\x72\x72\xda\x92\xb4\xf3\x1e\x4b\x7f\xea\x26\x2e\x4e\xd3\x77\x9e\xb1\x7e\x04\x28\x22\xf1\x69\xcb\xfb\x96\xa7\x69\x22\xd0\x0c\x00\x8b\xf9\x3f\x8a\xeb\x46\x59\x32\x66\x78\xcb\x15\x56\xcc\xaf\x9e\x4e\x4e\x4a\x80\x8e\x63\x2c\x68\xc4\x46\x91\x95\x77\x03\x21\x62\xf0\x49\x9c\x8f\x66\xe1\x0c\x97\x5f\xe0\x8d\xcb\xe6\x3e\xed\xf0\x2c\xa7\x3f\xff\x19\xca\x94\x87\xec\x18\x00\x54\x61\x2d\x95\x74\x52\x2b\xee\xa2\xbd\x75\xa9\x89\xbe\xed\x31\x9d\x4f\x3d\x47\xa9\xeb\xd0\x75\x9c\x23\xbc\x7e\x4f\xee\x29\xfb\x1d\x82\x33\xe1\xc8\x99\xd4\x98\x10\x26\xf3\xb7\x14\x38\x6b\x6d\x99\x2e\x1b\x01\x3a\xdf\xdf\x1b\xeb\x72\xcf\x1e\x15\xd6\x62\xd7\xba\xe5\xc3\x36\xd8\x29\xbc\xe9\x7d\xd7\x4f\x2c\x84\x11\xac\xcf\xc9\x85\x57\x67\xc4\xd4\xd8\x00\x1d\xa9\x4d\x8e\x64\xb7\xc3\xcc\x76\x34\x8d\x7d\x2d\x16\xdd\xf7\x47\xa2\xf3\x7c\xf5\x76\x8c\xc3\x69\xe4\x85\x64\xa9\xb7\xf0\xe7\x9f\xe0\xbe\x12\x80\xdf\x1b\x7f\x63\xa1\xbb\x1f\x7d\xee\x20\xfc\xbe\x15\x7d\x74\xd4\xf1\xd4\x04\x64\xab\x55\xb4\x8c\x87\xd8\x40\x43\xc7\xfd\xb1\xea\x62\x98\x3d\x0c\x95\xbb\x69\xcb\x78\x1c\x3f\xa1\xc8\x7f\x44\x32\x1e\x2c\x11\x10\x94\xce\x09\x2f\xd4\x4b\x06\xaf\x82\x67\xc2\x77\x50\xe0\x74\x0f\x2d\x5e\x61\xbb\x07\x3a\xbe\xd7\x2b\xb5\x72\x42\x7a\x3a\x5a\xdf\xc8\x2b\x54\x74\x1a\x71\x00\xe4\x1e\x82\x7b\x50\xb9\x0f\xbe\x5e\xdb\xe0\xca\xb5\xb6\x73\xc8\xc8\xae\xaf\x23\xd4\xe2\x09\xaa\xb7\x6f\x65\x8b\xb1\xde\xf7\x71\x46\x23\x59\xaf\xad\x47\x48\x24\xb9\x7f\x2c\x4d\x2b\x36\x36\x85\xd2\x7c\xc9\x16\x62\x98\x9c\xaf\x2f\x3f\x63\xe9\xd2\x80\x06\xd9\x62\x2c\x8d\x03\xd7\x50\x57\x0c\x48\xe9\xb7\x4d\x6c\xa4\x3c\x58\x58\xab\x97\x6d\xbb\xf6\xd7\x97\xa1\x4d\xf2\xc4\xf5\x84\xcc\xaf\x63\xd5\xed\x08\x89\x07\x77\x57\x87\xb0\xfa\x8f\xc3\xed\x51\x2c\xec\xa9\x46\x68\x1a\x14\xf7\x90\x22\xe7\x48\xc5\xb7\x0b\x1e\x3e\x45\x01\xff\xc0\x1f\xaf\xe2\xc6\xc9\xb7\x6c\x87\x6b\xfc\xd1\x20\xb4\x5a\x6f\xa5\x6a\xc8\x1e\x39\xbc\xd7\xd7\xe0\x8c\xb8\x42\x63\x11\x44\xdb\x86\xe5\x47\xa1\x60\xa7\x4b\x99\xab\x91\xcd\xc6\x71\x95\xc8\x50\x99\xd0\xe6\x93\xd3\x27\x9e\xbd\xde\x34\x35\x3b\x3d\x9e\x2b\x31\x61\xfb\xd8\x79\xb1\x62\x94\xfc\xf0\x03\x7f\xbd\x08\x69\xe2\x8d\xaa\xc6\x73\x66\x92\x59\xc7\xe3\xe5\x6e\xbf\xfd\x7d\x08\x0f\x53\x58\x0f\xb9\x7d\x88\x89\xd8\x60\xee\xc5\x44\xbc\x13\x1e\x9b\x44\x1e\x65\xf8\xc7\xce\x8b\x2b\x7d\xe2\x70\xbd\x91\xe5\x06\xba\x9d\x75\x60\xb0\x37\x68\xa9\x33\x10\xdc\x03\xf8\xcc\xd4\x1b\xf4\x3a\x60\x05\x3f\x6b\xe6\x19\x62\x67\xaf\xbb\x3d\x96\xb8\xa7\xc2\xe6\x90\xdd\xab\x50\xc7\x18\x22\xa0\xe5\xff\x29\xd9\x68\xab\xd5\xb0\x70\xed\x4c\xb8\xfb\xa0\x5c\xf5\xa6\xc5\x2e\x0b\x79\x39\xf0\xf0\xed\x5f\x0c\x00\xe2\x12\x27\x56\x2b\x48\xd3\xaf\x46\x1a\x5b\xe7\x24\x5c\xe1\x39\xbf\xe3\x74\x28\xf7\xfa\x6d\xb3\x16\x6e\xe3\x05\xac\xfd\x43\x90\x11\xa7\x46\x11\x45\x01\x17\x1f\x5e\x7f\x80\x92\xef\xc3\x63\x26\xe4\xdd\xfe\x4d\x58\xe9\x4f\x3a\xd8\xa0\x41\x90\x35\x5c\x23\xbf\x94\xe0\xd7\x12\xf9\x23\x14\x24\xed\x06\x17\x48\x05\xe1\x35\xc4\x9e\xae\x31\xe2\x39\x46\x43\xa0\x67\x41\xd1\x41\x6b\x26\x7a\x44\x0e\x9a\xa6\xe3\x93\x3f\x48\xa4\x7f\x59\x81\x15\x94\xba\x22\xc1\x23\x67\x2f\x9e\x45\x87\xfc\xb1\xde\x36\x43\xb5\xdc\x6f\x9b\xfc\xbc\xd4\xd4\x57\xc4\x9a\x3d\x7a\xc8\x6b\x45\x74\x8f\xd0\x68\x6a\x8a\xa1\xac\x3a\xb1\x64\x82\x01\x4d\x7b\x3a\x69\x7f\xb3\xe0\x67\xfc\xf1\x4d\x15\xcf\x21\x06\xc7\x03\xfc\x6b\xd2\x47\x90\x08\x5f\xcb\x8d\x62\xf7\x3a\xd7\x3d\xa1\xa1\x7b\xe5\x48\x99\x5e\x1c\xd5\xc3\x75\x30\xc4\x32\xa6\xf6\x37\x48\xe1\x0e\x7a\xb8\x50\x82\x8f\x9f\x3c\x05\x29\x47\x5d\xb0\x18\x46\x7c\xb2\x97\x0b\xd8\x4a\x55\x9d\x3b\x33\xa6\x2a\x1a\xb0\xb1\xbd\x95\x76\xb8\xbf\x9a\xc8\x1d\x04\x2e\x00\x95\x93\xee\x96\x03\x4f\xce\x43\xbe\x12\x93\x4e\x7d\x10\x30\x3f\x4c\x54\x22\xb6\xe6\xd9\x2c\xd9\xbf\xe4\x86\x15\x74\x62\x8b\xd9\xc1\x25\xf1\x7c\x96\x0c\x77\xeb\xfe\xdf\x43\x74\xf1\x35\xc3\x71\xed\xbf\x61\x35\xaf\xf1\x64\x63\x73\xc8\xf4\x96\xaf\xb6\x63\xa6\x89\x0b\x27\xb8\x2b\x0a\xe0\x2b\xd9\xc0\x0c\xb4\x6a\x6f\x27\xa1\xe9\xef\xc1\xef\x78\x35\xb3\x5f\xad\xf8\xfb\x95\x56\xce\xe8\xb6\x45\xf3\xab\x45\x43\x67\xc0\x93\xf1\x8e\xf7\xd4\x8e\xd3\xde\x3c\x93\x5d\xcc\xa7\x80\xe3\x5b\xf2\x63\xfc\xcf\x74\x85\xed\x51\xd6\x3c\xf3\x58\xae\xfb\xfe\xf9\x38\xd2\x7f\xa2\xbc\xca\x7b\xab\xb0\x46\xe3\xef\x4e\x3c\x93\x50\x4a\x1b\x2c\xf5\x15\x9a\x6c\x72\x5f\x78\xff\xc6\x24\xde\x95\x4c\x5e\xaa\xb0\xab\xa9\x9d\x0e\x06\x3d\xf9\x63\x01\x46\xb7\x48\x4d\x76\x76\x72\x35\x5f\xfa\xe8\x9d\x82\x92\x36\xcc\x71\x47\xa7\xef\xe5\xae\xc9\x5f\x09\x32\x9d\xcd\x9e\x2f\xe0\x5f\x9f\x73\x9b\x12\x01\x74\x74\x0b\x89\xde\x0e\xbf\xef\x48\xe1\xd2\xdd\xf0\xbb\x02\xad\x1c\xde\x38\xd2\x57\xec\xdc\x66\x09\xf4\xa9\x8d\xfc\x1f\x34\xbc\x07\x92\xbb\xf4\xd2\xc3\x1b\x89\xbb\x59\xf2\xdb\xd8\x4c\x78\xb4\x64\xa5\xbb\x99\x0f\xe8\xf7\xef\x2d\xf3\x57\x62\x67\x91\xbb\x05\x2a\x71\xfc\x1b\xc8\xfc\x8d\x31\x6b\x34\x1d\xc5\x07\xa7\xad\x11\x8a\x20\x95\x9b\xcd\x4a\xad\x2c\xbf\xf7\xdd\x47\xd0\x99\x28\x37\x52\x21\xac\xf6\x82\x52\xf3\x7b\x2c\xc6\x82\x9f\x7f\xd9\xa0\x72\x7e\xe4\x57\x25\xdd\xe4\x71\x1f\x8c\x61\x51\x04\xd0\x10\x54\xd9\x76\x2f\x36\xce\x39\x98\xb2\x39\x8c\x99\x26\x6c\x91\x13\xc9\xc7\xed\xa7\x18\xe7\x3e\xb1\xac\x86\x14\xf4\xe5\x81\x0d\x2c\x21\x2d\x87\xb1\x67\x9d\x1f\x7c\x26\x48\xcf\x74\x71\x7f\x2b\xe1\x3e\x3e\x3d\x4a\x38\xec\x70\xb8\xb5\x87\x74\xa7\xa4\xdb\xa7\xda\xdf\x38\x93\x4e\x55\xd8\x59\x34\x83\xe4\x68\x8f\x09\xc3\x8e\xc6\x22\x55\x74\x5a\x00\x0d\x99\x65\x57\xf2\x8d\x03\xa1\x66\x02\x9d\x59\x12\xf2\xce\x2b\x4f\x39\xe4\xfa\xac\x8c\x8b\xe7\xf0\x72\x47\x45\x43\xcc\x50\x2f\x87\xc5\x13\x33\x97\x39\xf1\x3c\xba\xfa\xf4\xf5\x31\xbf\xa4\xe9\x51\xe2\x73\x27\x1c\x95\xda\x4f\xf9\xad\x73\xce\x8f\x93\x55\x0a\xaf\xb3\xc9\xcc\xfc\x28\x8f\x5f\xd0\xea\x9d\x29\xf9\x86\x3d\xe8\x3c\x0c\x4d\x79\x4d\x4e\xb6\x7b\x2a\xac\xb5\x6e\x0f\xd4\x58\x87\xd7\x8a\xc7\x55\x59\x73\xce\x3f\xc6\x6f\xf4\xeb\x85\x20\x88\xfa\x17\xe7\x7b\xa3\x53\xb6\x3c\xfb\x1e\xaf\xf7\x97\xa5\x37\x37\x37\x37\xbe\x5e\x66\xc7\x8e\x1e\x9c\xf8\xf6\x9e\x83\x3c\x5a\x26\x91\x32\x2a\x28\x26\x2c\xbc\x87\x47\x81\xd9\xf8\x0e\x35\x1e\x93\xf9\xf1\xf3\x22\x84\xc0\x43\x6c\xff\x2e\xec\x7a\xf8\x3b\x84\x4c\xf7\x18\x3a\x80\xf1\x8f\x13\xf2\x97\xfc\x1a\x7a\x01\x4e\x98\x06\x5d\xd8\xfe\x85\x68\xe6\x90\x91\x0e\xd3\xea\x7a\x72\x8a\xed\xd7\x25\x47\x36\x33\x8d\xcd\x6f\x6d\x67\x4a\x4b\x5d\xdf\x77\x6e\x96\xc4\x0e\x91\xfe\x2d\x99\x63\xd2\xfb\x9a\x47\x5a\xf9\x08\x56\x07\xa7\xf7\xbd\x0d\x8c\xc9\xf3\x01\x51\x3f\xa3\x23\x69\x53\x74\x06\x4c\x86\x1b\xdc\xc0\x2f\x5e\xda\xde\x17\xba\xd8\x17\x34\xb9\x5e\x1b\xe0\x4c\xe3\x0c\xe4\x4b\x7d\x39\x5c\x22\xee\x27\xc7\x63\xab\x94\x74\x01\xfe\xc5\xf3\xbd\x65\x53\xa7\x2d\x8e\x3b\xea\x18\xc3\x30\xc5\x3c\x9f\x87\xcb\x08\x3e\x8e\xb3\x74\xa7\xb6\x4a\x5f\xfb\x13\x83\x23\xed\x7f\x03\x00\x00\xff\xff\xd0\xf7\xe5\xf6\xcc\x25\x00\x00")

func jujugenerateapidocProgGoBytes() ([]byte, error) {
	return bindataRead(
		_jujugenerateapidocProgGo,
		"jujugenerateapidoc/prog.go",
	)
}

func jujugenerateapidocProgGo() (*asset, error) {
	bytes, err := jujugenerateapidocProgGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jujugenerateapidoc/prog.go", size: 9676, mode: os.FileMode(436), modTime: time.Unix(1540902631, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jujugenerateapidoc/go.mod": jujugenerateapidocGoMod,
	"jujugenerateapidoc/go.sum": jujugenerateapidocGoSum,
	"jujugenerateapidoc/prog.go": jujugenerateapidocProgGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"jujugenerateapidoc": &bintree{nil, map[string]*bintree{
		"go.mod": &bintree{jujugenerateapidocGoMod, map[string]*bintree{
		}},
		"go.sum": &bintree{jujugenerateapidocGoSum, map[string]*bintree{
		}},
		"prog.go": &bintree{jujugenerateapidocProgGo, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

