// Code generated by go-bindata. DO NOT EDIT.
// sources:
// jujugenerateapidoc/go.mod
// jujugenerateapidoc/go.sum
// jujugenerateapidoc/prog.go
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jujugenerateapidocGoMod = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\xc1\x4e\x04\x21\x10\x44\xcf\xf2\x15\x1c\xf5\x00\x74\x83\x3b\x30\x9f\xc3\x42\x8b\x6c\x66\xa6\x91\x05\xe3\xe7\x9b\xac\xa7\x9d\xc4\x4b\xa5\x52\x49\xbd\xbc\x9d\xf3\xdc\x48\x96\x3a\x3e\xe7\x55\x27\xde\xcd\x6d\xde\xe6\x23\x62\xab\x99\xd3\xa3\x16\x3a\xa8\xc7\x41\x7f\x93\x10\x9d\xbe\x66\xed\x24\x5f\xc5\xcb\xff\x4f\xf9\x0d\x1a\x34\x28\x0b\x18\x10\x1c\xa0\x7d\x77\xd6\x29\x8f\xc1\x27\x08\x2b\xda\x8f\xab\x34\x46\xd6\x23\xd7\x4e\x69\x3c\xa1\x3a\x97\x46\xad\x91\xd9\xeb\xfd\x04\xc2\x80\x16\x57\xe7\x55\x86\x15\x2f\x0b\x5c\x62\xc2\xe5\x04\xe2\x2d\x1e\x45\x73\x2f\xe6\xc7\x0c\xe6\xed\x7e\x76\x01\x00\x8f\x8b\x8a\x10\xd1\x11\x78\x97\xfc\xb3\xcb\x9b\xf8\x0d\x00\x00\xff\xff\xb7\xba\x44\xe9\x19\x01\x00\x00")

func jujugenerateapidocGoModBytes() ([]byte, error) {
	return bindataRead(
		_jujugenerateapidocGoMod,
		"jujugenerateapidoc/go.mod",
	)
}

func jujugenerateapidocGoMod() (*asset, error) {
	bytes, err := jujugenerateapidocGoModBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jujugenerateapidoc/go.mod", size: 281, mode: os.FileMode(436), modTime: time.Unix(1540908573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jujugenerateapidocGoSum = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd4\x4b\xb3\xa2\x38\x18\x06\xe0\x7d\xff\x8a\xde\x9f\x52\x12\x6e\x09\x53\xd5\x0b\x44\x54\x50\xa0\x39\x0a\x88\x3b\x08\x77\x84\x70\x13\xc4\x5f\x3f\xe5\xa9\x9a\x1a\xa7\xbb\x67\x31\x7d\x66\xc3\xf2\x7d\xbe\x97\x7c\x49\x9a\x0f\xd9\x2d\x5c\x12\x5a\x31\xc5\xad\xb8\x7d\x7c\xbe\x8e\x60\x09\x96\x60\xc1\x02\x88\x21\xe0\x00\x80\x02\x27\x08\x0b\x21\xe6\xa4\x28\xc6\x1c\xc4\x09\xfb\x35\x83\x7f\xf0\xfd\xca\xd0\xd7\xe5\x34\xae\x6f\x01\xed\x6c\x99\x20\x63\x68\x79\xd4\xa9\xa1\x35\xef\xbd\xd3\x86\x58\x5c\xd4\x61\x6a\xcc\x2a\xf8\xf6\xe5\x37\x1d\x26\xa5\xcb\x8a\x46\x4f\xce\x54\x9d\xd1\x77\xee\x96\x5c\xf1\x62\xdc\x82\xab\x2f\x25\x6c\x5d\x6e\x83\xc3\x2e\xad\x27\x49\xba\xee\xb4\xfe\x34\x64\x7d\x6e\xa5\xf4\xd7\x5c\xd0\xe4\x11\x25\x3f\xa2\x90\xe5\x21\x94\x16\x12\x8b\xb1\x24\xc1\x30\x00\x80\x7f\x6a\x5a\x81\x57\x61\x09\x1a\x99\x33\x1e\x27\xa4\x11\xbe\x6c\x8f\x43\xa3\xad\xac\xdd\x05\x5a\xc7\xbb\x10\x52\xa2\x3a\xe8\x92\xcb\x22\xfe\xa4\xf6\x52\xd1\x5b\xe5\x6d\x5c\x6d\x95\x6a\xd2\x36\xd0\x15\xbc\xb7\xba\x1e\x7c\xce\x4a\xba\x37\x5c\x5c\x20\xd3\x1f\x71\x7c\x75\x90\x73\xb6\xd1\x7f\x45\x39\x96\x5b\x20\x88\x11\x01\x58\x82\x6c\x12\x3e\x35\xc9\x65\x66\x25\x21\x72\x29\x39\x9e\x51\x41\xcf\xd7\x65\x93\x3f\xb6\xbc\x76\x2e\x7a\xe2\xaf\x7b\x29\xa2\xa3\x56\xa5\x99\xda\xa7\x9f\xd4\xfe\x87\x8a\x65\xc7\x34\x5d\x3c\x0c\xf3\x93\x83\x4b\xf0\x12\x19\xc9\x33\x77\x8d\xd0\x55\x4a\x40\x1e\xae\x4d\xcb\xb6\x76\x3b\xc3\xf7\x35\x2d\xcc\x92\x70\x77\xac\x38\x85\xbf\xf4\x54\xb7\xde\x4d\xfa\x53\xe4\x33\x0f\x2e\xe1\x12\xbe\xe4\x35\x1b\xdb\xaf\x45\xd1\xdb\x75\x56\xf3\xdd\x37\xaf\xc5\x64\x19\x2d\x85\xe0\x54\xfa\x19\x4c\x66\x8e\xf8\x39\x65\xaf\x5c\xa8\xf4\xf6\x8f\x79\x43\x7c\x1f\x7e\x1e\x90\xd7\xc3\xf1\x6d\xad\x7b\x9c\x73\x62\x0e\xb9\x35\xe9\xb1\x6f\xc7\x30\x4e\xda\xc1\xb9\x33\xb9\x9b\x05\x15\xc3\x8f\x49\x24\x77\xa6\xf6\x8f\xc0\x8e\xa6\x4d\xdc\x34\x31\x13\x34\x39\xa1\x55\x13\x0c\x2f\xff\x5a\x04\x02\x8b\x20\x86\x82\xc0\x2f\x00\x11\x60\xc2\x05\x5c\x22\x89\x1f\xcb\x1b\xd4\x85\x66\x3e\xa0\xe9\x4d\x89\x77\xd6\xd3\x6c\xc7\x91\x9b\x34\xcc\xf5\x3b\x71\xa3\xf7\xa3\xab\xd6\xfe\xbe\x52\xd5\x6a\x50\x20\xff\x79\xf0\xf5\x70\x35\xd7\x9a\x55\x96\x4b\xce\xb5\x70\x14\xb8\xfe\x74\xa8\x69\x26\x47\xb0\xdd\x8c\x54\xa1\x0f\xd3\xd9\x3a\x77\x5b\x8e\x07\xa1\x77\x7e\xed\x56\x79\xff\xc3\x3e\x41\x0c\x59\x28\x71\x68\x11\x01\x09\x0a\x22\x10\x02\x02\xc5\xa7\x25\x8c\x01\x9b\x69\x01\xb1\x57\x6d\xd8\x3e\x6e\xd4\x56\x13\x90\xf1\xef\xfa\x3a\x54\xed\xf1\x4d\x24\xae\xe3\xf7\xea\x38\x31\x29\x9e\x3e\x65\xbd\xd4\xcb\x4e\x68\x2f\xea\xec\xc1\x9c\x9c\x20\x68\x51\x37\x4c\x1b\xc1\x35\x56\x52\x69\x4b\x73\x82\x76\xa9\xbf\x31\x5d\xcb\x4a\x78\x68\x3d\xcf\x91\x5e\x83\x3a\x5d\xd2\x2e\x65\xee\xcc\x40\xe9\xb5\xff\xe9\xb9\x03\x00\x41\x71\x11\x80\x00\x72\x31\x40\x1c\x41\x1f\xd7\xd2\xa9\x85\x7c\x6f\x8c\xe9\x41\xdb\x1a\x8f\xad\x01\x2b\xdd\x1b\x73\x96\xdd\xe4\xc6\x59\x3a\xaf\x44\xc6\xb4\x1e\xfe\x9e\xce\xa2\x38\xe3\xdf\x54\x5e\x2a\xd5\xc8\x54\x6e\x11\x59\x31\xb5\xfa\xb8\xbb\xdb\xea\x10\xae\x3d\x5f\x68\x12\xef\x74\x68\x57\x44\x61\xf7\x17\xb1\x98\xfd\xd1\xe0\xab\xe7\xae\xd3\xa6\x4c\x97\x79\xcd\x90\x2c\x26\xe5\x72\x84\xcf\xbb\xf3\x97\x05\x44\x16\x43\xc4\x41\x80\x17\x08\xe3\x24\x42\x98\x07\x90\x45\x2f\x96\x42\xc5\x3c\x74\x75\xf9\x51\xcb\x81\x56\xb6\x0d\xce\x6e\xa7\xe9\xaa\xdb\xca\x05\x40\xb1\xa0\x09\x43\x42\x93\x77\x3d\xc1\x7f\x80\x17\x2b\xee\xba\x94\xfe\x6d\x7d\x0c\xfd\x86\xce\x89\x32\xcf\xe9\x6a\x13\xe2\x5e\x2d\x52\x51\x94\xd8\x7b\xa1\x88\x4e\x2f\x80\xd3\xe6\xdd\x12\xf8\xb7\xbb\xef\xa8\x53\xa1\xfe\x7b\xd0\xeb\x60\xf7\xa9\x7f\x1c\x99\xf3\x03\x2a\xbc\xe4\x90\x88\xcd\xc5\x4b\x7e\x15\x9c\x13\xfd\x0e\xd5\x6a\xee\x36\xd9\x3e\x30\xdc\x30\x85\x55\xf9\xed\xcb\x9f\x01\x00\x00\xff\xff\x88\xbe\xb8\x92\x31\x07\x00\x00")

func jujugenerateapidocGoSumBytes() ([]byte, error) {
	return bindataRead(
		_jujugenerateapidocGoSum,
		"jujugenerateapidoc/go.sum",
	)
}

func jujugenerateapidocGoSum() (*asset, error) {
	bytes, err := jujugenerateapidocGoSumBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jujugenerateapidoc/go.sum", size: 1841, mode: os.FileMode(436), modTime: time.Unix(1540908577, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jujugenerateapidocProgGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x5a\xff\x8f\xdb\xb6\x92\xff\xd9\xfa\x2b\x58\x1d\xdc\x4a\x81\x23\xa5\x77\xc0\x1d\xe0\xab\x0b\xe4\x92\xa6\x2f\xb8\xa4\x35\xba\xdb\xf7\x70\x08\x82\x3e\xae\x34\x92\x19\x4b\xa4\x4a\xd2\xfb\xe5\xf2\xf6\x7f\x3f\xcc\xf0\x8b\x24\xdb\x9b\xdd\xeb\x6b\x80\xac\x2d\x72\x38\x5f\x3f\x33\x1c\x52\x2e\x4b\x76\xb9\x03\xd6\x82\x04\xcd\x2d\xf0\x41\xd4\xaa\x62\x83\x56\xad\xe6\x3d\x13\x86\x5d\x1d\x64\xdd\x41\xcd\xb8\x61\x5c\x32\x6e\x0c\x58\x26\xa4\x55\xec\xd3\xe1\xd3\xc1\x91\x27\x65\xc9\x8c\x62\x76\xc7\x2d\xbb\x01\x56\x2b\xf9\x8d\x65\x12\xa0\x66\x56\x31\x0d\x3d\xf4\x57\xa0\xf1\x7b\xa5\xfa\x41\x74\xe0\x28\xbd\x0c\x5c\x2c\x24\x53\xba\x76\x34\x41\x13\x66\x77\xc8\xaa\x32\x45\x32\xf0\x6a\xcf\x5b\x60\x3d\x17\x32\x21\x61\x00\xac\x15\x76\x77\xb8\x2a\x2a\xd5\x97\xa8\x09\xfd\x61\x2f\xfe\xe3\xdf\x9f\xf3\x41\x18\xd0\xd7\xa0\x9f\x37\xbc\xe2\x35\x3c\xef\x84\xb1\xcf\x6b\xb0\x5c\x74\x26\x49\x44\x3f\x28\x6d\x59\x96\x2c\x52\x90\x95\xaa\x85\x6c\xcb\x4f\x46\xc9\x34\x59\xa4\x4d\x6f\xf1\xa3\x55\x25\x37\xe1\xdb\xc0\xb5\x01\xed\x1f\xac\xda\x83\x0c\xdf\xef\x06\x30\xf8\x7d\x67\xfb\xae\xb4\xd0\x0f\x1d\xb7\x80\x03\x9d\x6a\xf1\x43\xd1\xac\x86\xa6\x83\xca\xa6\x49\xb2\x70\xbe\x36\xc0\x6a\x18\x40\xd6\x20\x2b\x01\x86\x99\x9d\x3a\x74\x35\x93\xca\xb2\x2b\x60\xc3\x01\xdd\x8b\xc6\x13\x7d\xab\x8a\x5e\xd5\xac\x11\x1d\xac\x30\x04\x76\x07\x77\x61\x45\xa5\x7a\x60\x8d\x56\x7d\xa4\x36\x80\xa2\xa0\xa6\xd8\xb0\x6b\xd0\x46\x28\x59\xa0\xba\x47\xce\x02\xad\x95\x26\xf5\xce\xb9\xb1\x8c\x2e\x7c\x9c\xa2\xac\x54\xdf\x3b\xef\x3d\x42\xe8\xa2\xf1\x20\xe1\x00\xba\x17\x06\x15\x7e\x90\x44\x0f\x15\xfe\x8f\x1e\x7d\x80\xcc\x58\x1f\x87\x56\x0d\xfb\xb6\x10\xd2\x0d\x4b\xde\x83\x29\xae\xff\x15\x23\x71\x76\xa1\x03\x73\xe9\x3e\x8e\xb8\x6b\xd5\x0e\x30\x0c\x80\xb3\x88\x62\x6e\x09\x34\x11\x03\xad\xea\xb8\x6c\x0b\xa5\xdb\xf2\xb6\xb4\x4a\x75\xa6\x24\xec\x10\x70\xcd\x4c\x19\xd0\xba\x55\xc5\xf5\xb7\x69\x92\x27\x49\x73\x90\x15\xe1\x3a\xcb\xd9\xe7\x64\x21\x64\xa3\x56\x0c\xb4\x66\xeb\x4d\xcc\x84\xb7\xb2\x51\x59\x9e\x2c\x44\x43\x33\x5f\x6d\x98\x14\x1d\x52\x2f\x3a\xd5\x16\x6f\xb8\xe5\x5d\x06\x5a\xe7\xc9\xe2\x3e\x59\xd4\xdc\xf2\xc8\x01\x55\x2c\xde\x73\x6d\x76\xbc\xcb\x90\xf7\x53\xb9\x28\x53\x5c\xd8\x5a\x1d\x6c\xf1\x37\x2d\x2c\x64\xc8\xd5\xad\xed\x40\x66\x03\x97\xa2\xda\x43\x9d\xb3\xef\xd9\x8b\xc8\x62\xab\x85\xb4\x4d\x96\x2e\xeb\x72\x59\x33\x17\x6d\xc3\x02\x2d\xbb\xd9\x81\x64\x56\xdf\x09\xd9\x62\x9a\xd7\x60\x31\xe0\x12\x18\xaf\x2a\x30\x86\x65\x76\x27\x0c\x16\x1c\xa9\x74\xcf\xbb\x3c\x5d\xcd\x65\xb9\x47\xde\x75\x6f\x88\xf3\x4f\x18\xcd\x9c\xb4\xbd\xf7\x6e\x9c\xfb\x8b\x65\xcf\x5c\x24\x8b\xb7\xc1\xa9\x4a\x93\x93\xab\xa6\x45\xe7\x84\xe0\x14\xaf\x94\x6c\x44\x8b\x66\xbc\x57\x35\xac\xc7\x89\x77\x8a\xd7\x2f\xbb\xee\xe2\x4e\x5a\x7e\xbb\x4a\x16\x8b\x2d\xd6\x82\x37\xa2\x83\x35\x43\x89\x59\x83\xc5\xf0\x19\x15\x85\x02\x87\x2f\xc0\xae\x28\x57\x11\x6b\xcc\x58\x2d\x64\xbb\x62\x46\x57\xec\xc3\xc7\xab\x3b\x0b\xa4\x94\xb1\x44\x3b\xd5\x68\xb1\xd0\x60\x0f\x5a\x32\x57\x6c\x8a\x28\x87\x24\x8c\x2c\x89\xd7\x6a\x46\xf5\x4a\xf5\x3d\x48\x6b\xf2\x64\xb1\xb8\x5f\x51\xf0\x5c\xbe\x6d\xf7\x64\xe5\xe3\x09\x3e\xec\x5b\x13\x11\x33\xb3\x3d\xfb\xba\x6a\x50\xff\xc0\xef\x2c\x7a\xbc\xe6\x52\x74\xc4\xa4\x55\xc5\x4f\xca\x42\x83\x58\x5a\xb1\xb4\xe2\x12\x0b\x5b\xa7\x78\xcd\x96\xbf\xa7\x73\x66\xf7\x23\xa2\xf6\xad\xc9\x91\xeb\xb7\x0f\xf1\x84\x9b\x26\x4b\x67\xda\x31\x47\x05\x35\x5b\xd6\x51\xef\x15\xd5\xd1\x6f\x03\x78\x90\xad\x13\x34\x38\x77\xe0\xc8\x87\x17\x1f\x13\x97\x6a\x21\x47\x28\x8d\x51\x46\x48\xb5\xda\xe0\x54\xf4\x52\xf1\x32\xc0\xce\x64\x79\xf1\x4e\x18\xfb\xda\x6d\x27\x9e\x16\x49\xb1\xa2\x67\xb5\x59\x4d\x57\xd5\xbd\x90\x6e\x5d\xa4\x2f\x8a\x22\x4f\x16\x8d\xd2\xec\xb7\x15\xab\x51\x8a\xe6\xb2\x05\x56\x1b\xb2\xdc\xd2\x48\xac\x71\xc5\xcf\x57\x9f\x2e\xef\x06\xf8\xb9\xc9\xea\x02\xbf\xe4\x49\xb2\x08\xab\x09\x64\x91\x81\x2d\xde\x83\xdd\xa9\x9a\x12\x23\xf3\xb0\xea\x57\xec\x37\x24\x09\x93\x19\xae\x41\xa8\xa0\xe3\x7b\x44\x10\xef\xcd\x34\x9a\x0b\xf2\x0b\x89\x22\x5f\x04\x1a\x5a\x73\x1f\x17\xfe\x02\xe6\xd0\xd9\x2f\x2f\x74\x34\x71\xe1\x3d\x85\x81\x0f\xe2\xad\x77\xfc\xd7\x93\xf4\x44\x0e\x61\xe9\x9a\x51\x15\x24\xf2\x07\xfd\xd4\xf8\xf8\x20\x03\xe7\xe1\xc0\x66\x81\x0e\x58\x33\xff\xaf\x2e\xf0\x11\x73\x77\xf1\x57\xb7\x1d\xae\xfd\xb8\x7f\xa4\xa9\x97\xd7\x5c\x74\xfc\xaa\x83\x4b\xb5\x66\x7c\x7c\xc8\xfc\x72\x56\xa3\x10\xab\xf4\x5d\xbe\x72\xa6\x2c\x06\x3b\xe6\x8c\x56\x2d\x2a\x8f\x70\x43\x52\x17\xa7\xc5\x99\x5c\x79\x5a\xb2\xb4\xe0\x9a\x23\x86\xb0\x64\xe8\x82\xe5\x75\x3a\x65\x8c\xf2\x6d\xad\xaa\xa8\x01\x12\xbe\x56\x95\xaf\x05\x4e\x8f\xc1\xfe\xb3\x3a\x60\x23\x58\x39\x96\x5e\x8b\xf5\x39\x4d\x9a\xe2\xb5\xaa\xd8\x86\xa1\x46\x4f\x42\xf0\x9f\x03\xe0\xa6\x9f\x40\xc0\x4d\x3a\x1c\xba\xf8\xcb\x10\xf6\xfb\x2f\xa2\xbd\xf1\xc3\x6c\x43\xa8\x2b\x7e\x81\xe6\xff\x83\xf9\x26\x0e\xcf\xd6\x1f\x41\x7f\xd1\x4f\x83\xd5\x93\xae\xa7\xe1\x72\xfe\x08\xc9\x79\x1c\xb5\x7f\x26\x6c\xc5\x51\xe4\x26\x92\xee\x9d\x2b\x7d\x08\x7b\x17\xc2\x45\xe3\x1d\x3a\xa9\x6c\x71\x68\xc5\x9a\x3e\x84\xde\x67\xb3\xcf\xc0\x09\xf5\xd1\xc4\x8a\x35\xae\x0a\x7b\x23\xfc\xf4\x0a\xad\xc1\xed\xfb\x9a\x6b\x66\xfb\xa1\x7b\x73\x90\x15\x72\x09\xcd\x74\x81\x03\xef\xf9\xf0\x39\x59\xa4\x88\xf1\x77\x42\xee\x53\xbf\xf7\x5a\xf6\x6c\x2c\xdd\x04\xac\x71\xd9\x5f\x2e\xdf\xbf\x23\xb7\x89\x86\x59\xb6\x39\x05\x7f\x2a\x4b\x9e\x7a\x23\x3a\x21\xf7\x18\x97\xa6\xb7\xc5\xc5\xe0\x9a\x98\xbf\x7f\xc7\xd9\x4e\x43\xb3\x49\x77\xd6\x0e\x66\x5d\x96\xad\x42\x9c\x61\x7f\xb7\x34\xe9\xf7\x4b\xf3\x5d\xc9\xbf\xff\xfb\x8a\x59\x5f\x20\xdc\x27\xfd\xc9\x70\xc7\x09\x82\x66\x2a\x65\x28\x0a\x1d\xb1\x8a\x3d\xcb\x39\x30\xb0\x67\x71\x9f\xdb\xba\x2f\x2b\x66\x29\x57\x9e\x8d\xd6\x3a\xb1\x7d\xcc\x18\xdf\x6d\xe4\x2c\x0b\x6d\xc7\xd8\x5e\x50\x4a\x12\x07\x5a\xea\x7b\xc9\xaf\x1c\xb3\xb7\xe6\xad\xb4\xa0\x1b\x5e\x41\x66\x5d\xd6\x95\x25\xfb\xd5\xb8\x03\xd8\xa0\x04\xce\xba\x52\x44\xa7\x33\x8b\xc7\x90\x9e\xcb\x3b\x2f\xdc\xe0\xf3\xa0\x8c\x11\x57\x1d\x14\x54\x00\x5c\x41\xa2\x0d\x75\xeb\xd6\x67\x96\xe2\x9f\x2c\x7a\xec\x98\xd6\x13\x02\x87\xaa\x0b\xb0\x44\x62\xa0\xa3\x14\x31\x60\x8b\x77\x4a\xed\x0f\x43\x46\x80\x1f\xed\x74\xba\x23\xdd\xe6\xa4\x07\x49\xd3\x79\xbb\xe0\x93\xa2\x11\xb2\xf6\x1c\xd8\xf2\x9a\x29\xe9\x72\x61\xe4\xb9\x62\xd6\xb7\xbd\x57\x9f\x50\xbc\x81\x0e\xcb\x16\x6d\xee\x50\x75\x31\x73\x91\xd1\x6b\xa8\x3a\x97\xb1\xea\xea\x53\xb1\x55\x86\xc2\xfd\x60\x5b\x34\xaa\xf4\x9e\x9b\xfd\xd8\x60\x9b\x1b\x61\xab\x1d\x43\xf6\xc8\x19\x3f\x8b\xcc\x12\x8a\xb1\x43\xe5\x06\x18\x75\x8a\x3f\x82\x44\x89\x6b\x87\x65\x22\xbb\x54\x7b\x14\xe4\xba\xce\xcb\xff\xd9\xfe\x30\x47\xf6\x91\x0f\x1a\x75\x90\x78\xb8\x94\xcf\x29\x84\x24\x70\xf9\x2f\x54\x0b\xa0\xea\x62\x0d\x77\x05\xd9\x0c\x50\x4d\xb6\x5a\x94\x76\x31\x40\xe5\xb6\xdc\x85\x0d\xd3\xf8\x59\xb8\x4e\x16\xf1\x84\x24\xae\x6c\xb9\xd0\xd2\x34\x4e\x78\x9a\x88\xaf\x50\xfe\x83\xb8\x7e\x94\x25\x42\x81\x37\xd4\x5e\x85\xf2\xea\xe8\xc4\x64\xff\xef\x29\xc7\xbc\x46\xe4\x14\x51\xbb\x30\x20\x20\x62\x4c\xc2\x7c\x70\x0b\x55\xb8\xe2\x12\x6e\x6d\x96\xbb\xb2\x43\xb3\x54\xfe\xdc\x5f\xdf\xa3\x3c\xe4\x47\x8f\x9f\x1a\x1a\x21\x85\x15\x4a\x52\xa3\xe9\xbc\x8b\xe7\xf5\xbb\x01\xd2\x7c\x1a\x39\x2c\x5d\xc7\xa1\xa3\x1a\xe1\xf4\xfb\xea\x44\xd9\x3f\x20\x38\xe3\x16\x83\x89\x67\x25\x3c\x5c\xbe\xc1\xb4\xd9\x2a\x43\x64\xd9\x88\xcf\x7c\x6e\x1a\xa9\x72\xe2\x8e\x1a\x1a\x7e\xe8\xec\xfa\x61\x17\x1c\x24\xdc\x0e\xee\x7e\x01\x59\x70\xcd\x49\x9d\xe5\xa5\xd3\x66\x84\xd4\x78\x24\x3b\x6d\x4c\xce\x16\xb7\xe3\xc2\x76\xb6\x8a\x7d\x21\x15\xed\x1f\x4f\x44\xeb\xd8\xaa\xfd\x98\x86\xd3\xc4\xf3\xa5\x52\xed\xd9\x3f\xfe\xc1\xec\x17\xf2\xef\x8f\xa6\xdf\xd8\xe4\xce\x93\xcf\x1e\x65\xdf\x63\xc9\x87\x3b\x1d\x4d\x4d\x30\xb6\xd9\x04\xcf\x38\x84\x45\x1a\xdc\xed\xcf\x35\x17\x71\xf6\x38\x53\xee\x27\x00\xb5\xe7\xf1\xe3\x1b\xfc\x27\x94\xe2\xe8\x09\x8f\xa0\x34\x47\xbc\x94\x65\x0c\xaa\x3f\xd9\xd1\x6d\x17\xb3\x6a\x60\x1d\x5c\x43\x37\x03\x1d\xdd\x20\x56\x4a\x5a\x2e\x1c\x1d\xae\x6f\xc5\x35\x48\xdc\x8b\x28\x01\x0a\x07\xc1\x29\x52\xce\x81\x6f\x50\xc6\xc7\x72\xab\x4c\xce\x32\x74\xec\xeb\x00\xb5\xb0\x81\xaa\x3d\x9e\xc6\xfd\x01\xd2\xe5\x19\x1d\xcf\x07\x65\x1c\x42\x02\xc5\xe9\xa6\x74\x72\x88\x95\x8a\xce\xf3\x3e\x85\x31\xf8\xea\xea\x13\x54\x36\xf5\x68\x08\xd7\x07\xeb\x4d\xe0\xea\xdb\x8a\x64\x81\x7d\x92\x5b\x16\xb4\x4c\x16\xd1\xa2\xbf\x0a\x23\x6c\xf6\xe1\xe3\x89\x8d\x9f\x87\x7d\x7b\xbf\x72\x5d\xd3\x59\x27\xe4\xec\x4a\x29\xa7\xb4\xc7\x62\x33\x02\x11\x0d\x76\x37\x20\x23\x88\x1e\x72\x47\xe3\xf3\xf0\x3f\x8f\xfd\x81\xc9\x33\xb3\x05\xe1\x17\x2d\x75\x18\xc4\x68\x0a\x79\x80\x88\xb7\xb2\x64\x7f\x83\x6f\xae\x83\xa7\x10\x0c\xe4\xb8\x1b\xf8\x46\x03\xeb\x94\xda\x0b\xd9\xa2\x03\x0b\xf6\x93\xba\x61\x56\xf3\x6b\xd0\x06\x18\xef\x3a\xbf\xfc\x2c\x76\xcc\x74\x29\x71\xd5\xa2\xdd\x59\xf2\x0f\x61\x6b\x42\x5b\x4c\x76\xab\xb0\x57\x3b\xb7\x34\xe4\xfe\xb0\x0f\x85\x02\xef\x92\xed\xbb\x0d\xa1\xea\xeb\xaf\xe9\xe3\x3b\x5f\x57\x7e\x90\xf5\xb8\x2f\x39\x93\xdc\x4c\x32\xdd\xa8\x1a\xde\x19\x78\x70\x57\xb2\x1a\xfd\x73\x4f\x29\xe7\x80\xe7\x19\x3d\x0e\xbb\x69\xf6\xc4\x1d\x24\x9d\xb5\xe5\x34\x14\x9b\xf2\xb2\x8c\x27\xdb\x59\x42\x86\xab\xef\xf1\x78\x4a\xa3\x94\x7b\xe1\xd0\x47\xa7\x0c\xe4\x70\xb3\x13\xd5\x8e\xf5\x07\x63\x99\x86\x41\x83\xc1\x53\x09\xa7\xf3\x87\x2b\x8b\x83\x06\xa7\x19\xd4\xec\x47\x45\x3c\x7d\xe2\x4e\x8f\xd5\xe7\x77\x8d\xa9\xb4\x9c\x65\x27\xdd\xf1\x98\xc0\x08\xda\xe2\xbf\x05\x45\x60\xb3\x89\x0b\xb7\x56\xfb\x5b\x17\xac\x94\x3f\x74\xd0\x67\x7e\x57\xf0\x3c\xdc\xd1\x33\xa4\x1f\x72\x09\x13\x9b\x0d\x4b\xd3\x2f\x3a\x9c\xdc\xb3\xf4\x57\x9a\xd6\x99\x9c\xc6\x56\x73\xd8\xb7\x5b\x6e\x77\x4e\xc0\xd6\x3d\x78\x19\x61\x6a\x14\x51\x96\xec\xf2\xe7\xd7\x3f\xb3\x8a\xee\xfd\x03\x16\xc8\xda\xff\xe2\x46\xb8\x7d\x96\xed\x40\x03\x13\x0d\xbb\x01\x7a\xf9\x42\xaf\x5f\x8a\x27\x28\x88\xda\xc5\x18\x08\x19\xee\xd2\x46\x5d\xc7\xb2\x73\x12\x86\x3f\xbb\xfe\x38\xf3\x83\x43\xd0\x05\xc1\x1b\x9f\x93\x49\xda\x0c\xfb\x36\x39\xcd\x99\x3f\x27\x51\xa6\x5b\xd5\xf2\x77\x74\x88\x7b\x65\x04\x35\xab\x54\x0d\xae\xd7\x42\x95\xfc\x91\xc6\x1f\x1a\x88\x3f\x81\xcf\x14\x17\x95\xc2\x63\x56\x38\xc2\x04\xd0\x38\x45\x90\xfe\x09\x6a\x4c\xa3\x13\xdb\xcc\xa5\xc1\xa8\x44\x80\x4f\x15\x41\x3d\x46\xe8\xbb\x7e\x06\x5b\xc0\xe3\xb4\x18\x3b\x9a\x2f\x49\x1f\x71\xcb\x5d\x6f\x3b\x8a\x9d\x95\x8c\x99\x50\x5f\x38\x28\x7b\xa7\xb7\x68\x4d\xbc\xb1\x8f\x77\xe2\x8d\xbb\x4e\xf3\xaf\x09\xe2\xed\x1a\xfb\xf0\xd1\x51\xa0\x72\x08\x3b\x1e\x47\x5c\x9f\x24\x56\x6c\x2f\x64\x7d\x61\xf5\x58\x8a\x71\xc0\x04\xf4\x08\x13\x2f\xf3\x26\x72\xa3\xc0\x15\x03\x69\x85\xbd\xa3\x5a\x20\x72\x5f\x8f\xf9\xe4\xe6\x22\x0a\xc8\x8f\x7b\x1a\x1e\xae\x2a\xb2\x64\x31\x7f\x0f\xc1\x36\xac\xe7\x7b\xc8\x7a\x3e\x7c\x70\xda\x7e\x44\x44\xe7\x98\x1d\xfe\xf5\x87\xfb\xf7\x10\x5d\x78\x13\x74\x5e\xfb\x47\xbc\xe6\x34\x9e\x18\x96\xb3\x4c\xed\x29\xa7\x42\xf1\x0b\x0b\x27\xb8\x2b\x4b\x46\xf7\xd3\x9e\x19\x53\xb2\xbb\x2b\x4e\x12\x88\x56\x13\xfb\xcd\x86\x3e\x5f\x29\x69\xb5\xea\x3a\xd0\xbf\x1a\xd0\xb8\xc7\x7d\x35\x5e\x78\xbf\x35\xe3\xb4\x73\xcf\xc4\x8a\x7c\x0a\x38\x9f\xb2\xa7\xfc\xdf\xab\x1a\xba\xb3\xac\x69\xe6\xa9\x5c\xe7\xf1\xf9\x30\xd2\x7f\xc4\x52\x4f\xb6\xd5\xd0\x80\x76\x55\xc9\x31\xf1\x47\x0b\x0d\x95\xba\x06\x9d\x4d\xae\x4f\x4f\x6f\x90\x7c\xb5\x29\xcb\xe9\x9b\x2f\x0a\x36\x53\xd1\xa5\xcb\xdf\x57\x4c\xab\x0e\xd8\xf2\x9a\x65\xcb\xeb\x7c\xed\xf2\x77\x0a\x4b\x34\x99\x32\x0f\xfb\x8b\xab\x43\x5b\xbc\xe2\xe8\x3c\x93\xbd\x58\xb1\x7f\x7b\x41\x27\xb7\x00\xa1\xb3\x46\x2c\xd4\x3e\x7e\xbf\x47\x95\x2b\x7b\x8b\x46\x60\x33\x05\xb7\x16\x35\xe6\x07\xbb\x5b\x33\xfc\xab\xb4\xf8\x5f\xd0\x64\x05\xca\x5d\x3b\xe9\xe3\x8b\xa3\xdf\xc6\xe3\x95\xc3\x4b\x56\xd9\xdb\x3c\xe2\xdf\xbd\x34\x2e\x5e\xf1\x83\x01\x3a\x40\x61\x13\xe7\x5e\xff\x16\x3f\x68\xbd\x05\xdd\x63\x86\x50\xe1\x1a\xc1\xc8\x84\xb4\x49\x52\x29\x69\xe8\xa5\xfb\x1c\x43\xef\x79\xb5\x13\x12\xd8\x66\x96\x96\x8a\x5e\x36\x12\x1a\xdc\xfc\xcb\x16\xa4\x75\x23\xbf\x4a\x61\x27\x8f\x73\x38\xfa\x45\x01\x42\x31\xad\xb2\xfd\x2c\x3b\x2e\x28\x9d\xb2\x9c\x8d\xb5\xc6\x9b\x48\xa5\xe4\xc3\xfe\x63\xc8\x74\x57\x5a\x36\xb1\x08\x7d\x7e\xc0\x80\x35\x4b\xab\x38\xf6\xbc\x77\x83\xcf\x39\xea\x99\xae\x4e\x4d\xf1\xaf\x27\xd2\xb3\x84\xd1\xc2\xf8\x12\x83\xa5\x07\x29\xec\x9c\x6a\x6e\x38\x91\x4e\x55\x38\x18\xd0\x51\x72\xf0\xc7\x84\x61\x8f\x63\x81\x2a\x04\xcd\x83\x06\xdd\x72\xa8\xe8\x0e\x06\x51\x33\x81\x4e\xb2\xf0\x95\xe7\x95\xa3\x8c\xd5\x3e\xab\xc2\xe2\x9c\xbd\x3c\x60\x27\x13\x6a\xd4\xcb\xb8\x78\xe2\xe6\xaa\x40\x9e\x67\x57\xbf\x7d\x7d\x2e\x2e\x69\x7a\x96\xf8\xc2\x72\x8b\x87\x89\x67\xf4\xca\xbf\xa0\xc7\xc9\x2a\x09\x37\xd9\x64\x26\x3f\xcb\xe3\x17\x30\xea\xa0\x2b\x7a\xe5\xe0\x75\x8e\x43\x53\x5e\x93\xbd\xed\x44\x85\xad\x52\xdd\x91\x1a\x5b\xdf\xd1\x9c\x57\x65\x4b\x55\xff\x1c\xbf\x31\xae\x97\x1c\x21\xea\x7e\xb5\x30\x1b\x9d\xb2\xa5\xd9\x9f\xe0\x66\xbe\x2c\xbd\xbd\xbd\xbd\x75\xc7\x6a\x0a\xec\x18\xc1\x49\x6c\x4f\x02\xe4\xd0\x32\xc9\x94\x51\x41\x3e\x61\xe1\x22\x3c\x0a\xcc\xc6\xf6\x2d\x6c\x94\xc5\xf9\x1d\xc3\xa7\xc0\x43\x6c\xff\xc2\xcd\x36\xfe\x08\x24\x53\x03\xf8\xd3\xca\xf8\xcb\x90\xe2\x25\xfd\x56\x60\xc5\x2c\xd7\x2d\x58\x6f\xfe\x25\x6f\x73\x96\xa1\x0e\xd3\x96\x7f\xb2\x8f\xcd\x3b\x93\x33\xc6\x4c\x73\xf3\x31\x73\xa6\xb4\x78\xae\xfd\x83\xc6\xa2\xd8\x98\xe9\x8f\xc9\x1c\x8b\xde\x97\x22\xd2\x89\x27\xb0\x3a\xda\xbf\x4f\x0c\x18\x8b\xe7\x03\xa2\x7e\x04\x8b\xd2\xa6\xe8\xf4\x98\xf4\x77\xda\x9e\x5f\xb8\xc6\x3e\x15\xba\x9a\x0b\x9a\xdc\x38\x46\x38\xe3\x38\x01\xf9\x4a\x5d\xc5\x6b\xd5\x79\x71\x3c\xb7\x4a\x0a\xeb\xe1\x5f\xbe\x98\x2d\x9b\x06\x6d\x75\x3e\x50\xe7\x18\xfa\x29\xe2\xf9\xc2\x9f\x95\x69\x3b\xce\xd2\x83\xdc\x4b\x75\xe3\x76\x0c\xca\xb4\xff\x0b\x00\x00\xff\xff\xad\xfc\x04\x07\x49\x27\x00\x00")

func jujugenerateapidocProgGoBytes() ([]byte, error) {
	return bindataRead(
		_jujugenerateapidocProgGo,
		"jujugenerateapidoc/prog.go",
	)
}

func jujugenerateapidocProgGo() (*asset, error) {
	bytes, err := jujugenerateapidocProgGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jujugenerateapidoc/prog.go", size: 10057, mode: os.FileMode(436), modTime: time.Unix(1540908507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jujugenerateapidoc/go.mod": jujugenerateapidocGoMod,
	"jujugenerateapidoc/go.sum": jujugenerateapidocGoSum,
	"jujugenerateapidoc/prog.go": jujugenerateapidocProgGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"jujugenerateapidoc": &bintree{nil, map[string]*bintree{
		"go.mod": &bintree{jujugenerateapidocGoMod, map[string]*bintree{}},
		"go.sum": &bintree{jujugenerateapidocGoSum, map[string]*bintree{}},
		"prog.go": &bintree{jujugenerateapidocProgGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

